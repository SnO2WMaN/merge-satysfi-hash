/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* Root := YoJSONObject
* Whitespace := ' ' | '\t' | '\r' | '\n'
* Quot := '"' actual='[a-zA-Z0-9_\-\/\.]*' '"'
* YoJSONObject := '{' p=YoJSONObjectProp sp={ ',' p=YoJSONObjectProp }* '}'
*   .actual = YoJSONObjectProp[] { return [p, ...sp.map(({p}) => p)]; }
* YoJSONObjectProp := Whitespace* key=YoJSONObjectPropKey Whitespace* ':' Whitespace* value=YoJSONObjectPropValue Whitespace*
* YoJSONObjectPropKey := Quot
* YoJSONObjectPropValue := YoJSONVariant
* YoJSONString := '"' actual='[a-zA-Z0-9_\-\/\.]*' '"'
* YoJSONVariant := '<' key=YoJSONObjectPropKey ':' value={ '{' key=Quot ':' value=YoJSONString '}' } '>'
* Key := actual='[a-zA-Z]*'
* Value := YoJSONBool
* YoJSONNull := literal='null'
*         .actual = null { return null; }
* YoJSONBool := YoJSONTrue | YoJSONFalse
* YoJSONTrue := literal='true'
*         .actual = boolean { return true; }
* YoJSONFalse := literal='false'
*         .actual = boolean { return false; }
* YoJSONFloat := YoJSONNaN | YoJSONPlusInfinity | YoJSONMinusInfinity
* YoJSONNaN := literal = 'NaN'
*        .actual = number {return Number(NaN);}
* YoJSONPlusInfinity := literal = '\+Infinity'
*        .actual = number {return Number(+Infinity);}
* YoJSONMinusInfinity := literal = '\-Infinity'
*        .actual = number {return Number(-Infinity);}
* ASCII := '[a-z][a-zA-Z0-9_-]*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    Root = "Root",
    Whitespace_1 = "Whitespace_1",
    Whitespace_2 = "Whitespace_2",
    Whitespace_3 = "Whitespace_3",
    Whitespace_4 = "Whitespace_4",
    Quot = "Quot",
    YoJSONObject = "YoJSONObject",
    YoJSONObject_$0 = "YoJSONObject_$0",
    YoJSONObjectProp = "YoJSONObjectProp",
    YoJSONObjectPropKey = "YoJSONObjectPropKey",
    YoJSONObjectPropValue = "YoJSONObjectPropValue",
    YoJSONString = "YoJSONString",
    YoJSONVariant = "YoJSONVariant",
    YoJSONVariant_$0 = "YoJSONVariant_$0",
    Key = "Key",
    Value = "Value",
    YoJSONNull = "YoJSONNull",
    YoJSONBool_1 = "YoJSONBool_1",
    YoJSONBool_2 = "YoJSONBool_2",
    YoJSONTrue = "YoJSONTrue",
    YoJSONFalse = "YoJSONFalse",
    YoJSONFloat_1 = "YoJSONFloat_1",
    YoJSONFloat_2 = "YoJSONFloat_2",
    YoJSONFloat_3 = "YoJSONFloat_3",
    YoJSONNaN = "YoJSONNaN",
    YoJSONPlusInfinity = "YoJSONPlusInfinity",
    YoJSONMinusInfinity = "YoJSONMinusInfinity",
    ASCII = "ASCII",
}
export type Root = YoJSONObject;
export type Whitespace = Whitespace_1 | Whitespace_2 | Whitespace_3 | Whitespace_4;
export type Whitespace_1 = string;
export type Whitespace_2 = string;
export type Whitespace_3 = string;
export type Whitespace_4 = string;
export interface Quot {
    kind: ASTKinds.Quot;
    actual: string;
}
export class YoJSONObject {
    public kind: ASTKinds.YoJSONObject = ASTKinds.YoJSONObject;
    public p: YoJSONObjectProp;
    public sp: YoJSONObject_$0[];
    public actual: YoJSONObjectProp[];
    constructor(p: YoJSONObjectProp, sp: YoJSONObject_$0[]){
        this.p = p;
        this.sp = sp;
        this.actual = ((): YoJSONObjectProp[] => {
        return [p, ...sp.map(({p}) => p)];
        })();
    }
}
export interface YoJSONObject_$0 {
    kind: ASTKinds.YoJSONObject_$0;
    p: YoJSONObjectProp;
}
export interface YoJSONObjectProp {
    kind: ASTKinds.YoJSONObjectProp;
    key: YoJSONObjectPropKey;
    value: YoJSONObjectPropValue;
}
export type YoJSONObjectPropKey = Quot;
export type YoJSONObjectPropValue = YoJSONVariant;
export interface YoJSONString {
    kind: ASTKinds.YoJSONString;
    actual: string;
}
export interface YoJSONVariant {
    kind: ASTKinds.YoJSONVariant;
    key: YoJSONObjectPropKey;
    value: YoJSONVariant_$0;
}
export interface YoJSONVariant_$0 {
    kind: ASTKinds.YoJSONVariant_$0;
    key: Quot;
    value: YoJSONString;
}
export interface Key {
    kind: ASTKinds.Key;
    actual: string;
}
export type Value = YoJSONBool;
export class YoJSONNull {
    public kind: ASTKinds.YoJSONNull = ASTKinds.YoJSONNull;
    public literal: string;
    public actual: null;
    constructor(literal: string){
        this.literal = literal;
        this.actual = ((): null => {
        return null;
        })();
    }
}
export type YoJSONBool = YoJSONBool_1 | YoJSONBool_2;
export type YoJSONBool_1 = YoJSONTrue;
export type YoJSONBool_2 = YoJSONFalse;
export class YoJSONTrue {
    public kind: ASTKinds.YoJSONTrue = ASTKinds.YoJSONTrue;
    public literal: string;
    public actual: boolean;
    constructor(literal: string){
        this.literal = literal;
        this.actual = ((): boolean => {
        return true;
        })();
    }
}
export class YoJSONFalse {
    public kind: ASTKinds.YoJSONFalse = ASTKinds.YoJSONFalse;
    public literal: string;
    public actual: boolean;
    constructor(literal: string){
        this.literal = literal;
        this.actual = ((): boolean => {
        return false;
        })();
    }
}
export type YoJSONFloat = YoJSONFloat_1 | YoJSONFloat_2 | YoJSONFloat_3;
export type YoJSONFloat_1 = YoJSONNaN;
export type YoJSONFloat_2 = YoJSONPlusInfinity;
export type YoJSONFloat_3 = YoJSONMinusInfinity;
export class YoJSONNaN {
    public kind: ASTKinds.YoJSONNaN = ASTKinds.YoJSONNaN;
    public literal: string;
    public actual: number;
    constructor(literal: string){
        this.literal = literal;
        this.actual = ((): number => {
        return Number(NaN);
        })();
    }
}
export class YoJSONPlusInfinity {
    public kind: ASTKinds.YoJSONPlusInfinity = ASTKinds.YoJSONPlusInfinity;
    public literal: string;
    public actual: number;
    constructor(literal: string){
        this.literal = literal;
        this.actual = ((): number => {
        return Number(+Infinity);
        })();
    }
}
export class YoJSONMinusInfinity {
    public kind: ASTKinds.YoJSONMinusInfinity = ASTKinds.YoJSONMinusInfinity;
    public literal: string;
    public actual: number;
    constructor(literal: string){
        this.literal = literal;
        this.actual = ((): number => {
        return Number(-Infinity);
        })();
    }
}
export type ASCII = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchRoot($$dpth: number, $$cr?: ErrorTracker): Nullable<Root> {
        return this.matchYoJSONObject($$dpth + 1, $$cr);
    }
    public matchWhitespace($$dpth: number, $$cr?: ErrorTracker): Nullable<Whitespace> {
        return this.choice<Whitespace>([
            () => this.matchWhitespace_1($$dpth + 1, $$cr),
            () => this.matchWhitespace_2($$dpth + 1, $$cr),
            () => this.matchWhitespace_3($$dpth + 1, $$cr),
            () => this.matchWhitespace_4($$dpth + 1, $$cr),
        ]);
    }
    public matchWhitespace_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Whitespace_1> {
        return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
    }
    public matchWhitespace_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Whitespace_2> {
        return this.regexAccept(String.raw`(?:\t)`, $$dpth + 1, $$cr);
    }
    public matchWhitespace_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Whitespace_3> {
        return this.regexAccept(String.raw`(?:\r)`, $$dpth + 1, $$cr);
    }
    public matchWhitespace_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Whitespace_4> {
        return this.regexAccept(String.raw`(?:\n)`, $$dpth + 1, $$cr);
    }
    public matchQuot($$dpth: number, $$cr?: ErrorTracker): Nullable<Quot> {
        return this.run<Quot>($$dpth,
            () => {
                let $scope$actual: Nullable<string>;
                let $$res: Nullable<Quot> = null;
                if (true
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$actual = this.regexAccept(String.raw`(?:[a-zA-Z0-9_\-\/\.]*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Quot, actual: $scope$actual};
                }
                return $$res;
            });
    }
    public matchYoJSONObject($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONObject> {
        return this.run<YoJSONObject>($$dpth,
            () => {
                let $scope$p: Nullable<YoJSONObjectProp>;
                let $scope$sp: Nullable<YoJSONObject_$0[]>;
                let $$res: Nullable<YoJSONObject> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$p = this.matchYoJSONObjectProp($$dpth + 1, $$cr)) !== null
                    && ($scope$sp = this.loop<YoJSONObject_$0>(() => this.matchYoJSONObject_$0($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new YoJSONObject($scope$p, $scope$sp);
                }
                return $$res;
            });
    }
    public matchYoJSONObject_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONObject_$0> {
        return this.run<YoJSONObject_$0>($$dpth,
            () => {
                let $scope$p: Nullable<YoJSONObjectProp>;
                let $$res: Nullable<YoJSONObject_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$p = this.matchYoJSONObjectProp($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.YoJSONObject_$0, p: $scope$p};
                }
                return $$res;
            });
    }
    public matchYoJSONObjectProp($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONObjectProp> {
        return this.run<YoJSONObjectProp>($$dpth,
            () => {
                let $scope$key: Nullable<YoJSONObjectPropKey>;
                let $scope$value: Nullable<YoJSONObjectPropValue>;
                let $$res: Nullable<YoJSONObjectProp> = null;
                if (true
                    && this.loop<Whitespace>(() => this.matchWhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$key = this.matchYoJSONObjectPropKey($$dpth + 1, $$cr)) !== null
                    && this.loop<Whitespace>(() => this.matchWhitespace($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.loop<Whitespace>(() => this.matchWhitespace($$dpth + 1, $$cr), true) !== null
                    && ($scope$value = this.matchYoJSONObjectPropValue($$dpth + 1, $$cr)) !== null
                    && this.loop<Whitespace>(() => this.matchWhitespace($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.YoJSONObjectProp, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchYoJSONObjectPropKey($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONObjectPropKey> {
        return this.matchQuot($$dpth + 1, $$cr);
    }
    public matchYoJSONObjectPropValue($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONObjectPropValue> {
        return this.matchYoJSONVariant($$dpth + 1, $$cr);
    }
    public matchYoJSONString($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONString> {
        return this.run<YoJSONString>($$dpth,
            () => {
                let $scope$actual: Nullable<string>;
                let $$res: Nullable<YoJSONString> = null;
                if (true
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$actual = this.regexAccept(String.raw`(?:[a-zA-Z0-9_\-\/\.]*)`, $$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.YoJSONString, actual: $scope$actual};
                }
                return $$res;
            });
    }
    public matchYoJSONVariant($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONVariant> {
        return this.run<YoJSONVariant>($$dpth,
            () => {
                let $scope$key: Nullable<YoJSONObjectPropKey>;
                let $scope$value: Nullable<YoJSONVariant_$0>;
                let $$res: Nullable<YoJSONVariant> = null;
                if (true
                    && this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr) !== null
                    && ($scope$key = this.matchYoJSONObjectPropKey($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchYoJSONVariant_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.YoJSONVariant, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchYoJSONVariant_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONVariant_$0> {
        return this.run<YoJSONVariant_$0>($$dpth,
            () => {
                let $scope$key: Nullable<Quot>;
                let $scope$value: Nullable<YoJSONString>;
                let $$res: Nullable<YoJSONVariant_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$key = this.matchQuot($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchYoJSONString($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.YoJSONVariant_$0, key: $scope$key, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchKey($$dpth: number, $$cr?: ErrorTracker): Nullable<Key> {
        return this.run<Key>($$dpth,
            () => {
                let $scope$actual: Nullable<string>;
                let $$res: Nullable<Key> = null;
                if (true
                    && ($scope$actual = this.regexAccept(String.raw`(?:[a-zA-Z]*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Key, actual: $scope$actual};
                }
                return $$res;
            });
    }
    public matchValue($$dpth: number, $$cr?: ErrorTracker): Nullable<Value> {
        return this.matchYoJSONBool($$dpth + 1, $$cr);
    }
    public matchYoJSONNull($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONNull> {
        return this.run<YoJSONNull>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<YoJSONNull> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:null)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new YoJSONNull($scope$literal);
                }
                return $$res;
            });
    }
    public matchYoJSONBool($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONBool> {
        return this.choice<YoJSONBool>([
            () => this.matchYoJSONBool_1($$dpth + 1, $$cr),
            () => this.matchYoJSONBool_2($$dpth + 1, $$cr),
        ]);
    }
    public matchYoJSONBool_1($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONBool_1> {
        return this.matchYoJSONTrue($$dpth + 1, $$cr);
    }
    public matchYoJSONBool_2($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONBool_2> {
        return this.matchYoJSONFalse($$dpth + 1, $$cr);
    }
    public matchYoJSONTrue($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONTrue> {
        return this.run<YoJSONTrue>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<YoJSONTrue> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:true)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new YoJSONTrue($scope$literal);
                }
                return $$res;
            });
    }
    public matchYoJSONFalse($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONFalse> {
        return this.run<YoJSONFalse>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<YoJSONFalse> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:false)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new YoJSONFalse($scope$literal);
                }
                return $$res;
            });
    }
    public matchYoJSONFloat($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONFloat> {
        return this.choice<YoJSONFloat>([
            () => this.matchYoJSONFloat_1($$dpth + 1, $$cr),
            () => this.matchYoJSONFloat_2($$dpth + 1, $$cr),
            () => this.matchYoJSONFloat_3($$dpth + 1, $$cr),
        ]);
    }
    public matchYoJSONFloat_1($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONFloat_1> {
        return this.matchYoJSONNaN($$dpth + 1, $$cr);
    }
    public matchYoJSONFloat_2($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONFloat_2> {
        return this.matchYoJSONPlusInfinity($$dpth + 1, $$cr);
    }
    public matchYoJSONFloat_3($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONFloat_3> {
        return this.matchYoJSONMinusInfinity($$dpth + 1, $$cr);
    }
    public matchYoJSONNaN($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONNaN> {
        return this.run<YoJSONNaN>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<YoJSONNaN> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:NaN)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new YoJSONNaN($scope$literal);
                }
                return $$res;
            });
    }
    public matchYoJSONPlusInfinity($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONPlusInfinity> {
        return this.run<YoJSONPlusInfinity>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<YoJSONPlusInfinity> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:\+Infinity)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new YoJSONPlusInfinity($scope$literal);
                }
                return $$res;
            });
    }
    public matchYoJSONMinusInfinity($$dpth: number, $$cr?: ErrorTracker): Nullable<YoJSONMinusInfinity> {
        return this.run<YoJSONMinusInfinity>($$dpth,
            () => {
                let $scope$literal: Nullable<string>;
                let $$res: Nullable<YoJSONMinusInfinity> = null;
                if (true
                    && ($scope$literal = this.regexAccept(String.raw`(?:\-Infinity)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new YoJSONMinusInfinity($scope$literal);
                }
                return $$res;
            });
    }
    public matchASCII($$dpth: number, $$cr?: ErrorTracker): Nullable<ASCII> {
        return this.regexAccept(String.raw`(?:[a-z][a-zA-Z0-9_-]*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchRoot(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<Root>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}